'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _config = require('../../../config');

var _config2 = _interopRequireDefault(_config);

var _humps = require('humps');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CALL_API = _config2.default.CALL_API;
var CHAIN_API = _config2.default.CHAIN_API;
var API_BASE_URL = _config2.default.API_BASE_URL;

exports.default = function (_ref) {
  var dispatch = _ref.dispatch;
  var getState = _ref.getState;
  return function (next) {
    return function (action) {
      if (action[CALL_API]) {
        return dispatch(_defineProperty({}, CHAIN_API, [function () {
          return action;
        }]));
      }

      var deferred = _bluebird2.default.defer();

      if (!action[CHAIN_API]) {
        return next(action);
      }

      var promiseCreators = action[CHAIN_API].map(function (apiActionCreator) {
        return createRequestPromise(apiActionCreator, next, getState, dispatch);
      });

      var overall = promiseCreators.reduce(function (promise, creator) {
        return promise.then(function (body) {
          return creator(body);
        });
      }, _bluebird2.default.resolve());

      overall.finally(function () {
        deferred.resolve();
      }).catch(function () {});

      return deferred.promise;
    };
  };
};

function actionWith(action, toMerge) {
  var ret = (0, _objectAssign2.default)({}, action, toMerge);
  delete ret[CALL_API];
  return ret;
}

function createRequestPromise(apiActionCreator, next, getState, dispatch) {
  return function (prevBody) {
    var apiAction = apiActionCreator(prevBody);
    var deferred = _bluebird2.default.defer();
    var params = apiAction[CALL_API];

    _superagent2.default[params.method](params.url).send(params.body).query(params.query).end(function (err, res) {
      if (err) {
        if (params.errorType) {
          dispatch(actionWith(apiAction, {
            type: params.errorType,
            error: err
          }));
        }

        if (_lodash2.default.isFunction(params.afterError)) {
          params.afterError({ getState: getState });
        }
        deferred.reject();
      } else {
        var resBody = (0, _humps.camelizeKeys)(res.body);
        dispatch(actionWith(apiAction, {
          type: params.successType,
          response: resBody
        }));

        if (_lodash2.default.isFunction(params.afterSuccess)) {
          params.afterSuccess({ getState: getState });
        }
        deferred.resolve(resBody);
      }
    });

    return deferred.promise;
  };
}