'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = apiMiddleware;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function apiMiddleware() {
  return function (next) {
    return function (action) {
      var promise = action.promise;
      var type = action.type;

      var rest = _objectWithoutProperties(action, ['promise', 'type']);

      console.log('执行中间件next', next);
      console.log('执行中间件action', action);
      console.log('执行中间件rest', rest);
      if (!promise) {
        return next(action);
      }

      var SUCCESS = type + '_SUCCESS';
      var REQUEST = type + '_REQUEST';
      var FAILURE = type + '_FAILURE';

      next(_extends({}, rest, { type: REQUEST }));

      return promise.then(function (response) {
        return {
          json: response.data,
          status: response.statusText
        };
      }).then(function (_ref) {
        var json = _ref.json;
        var status = _ref.status;

        next(_extends({}, rest, { response: json, type: SUCCESS }));
        return true;
      }).then(undefined, function (error) {
        next(_extends({}, rest, { response: error, type: FAILURE }));
        return false;
      });
    };
  };
}

// import superAgent from 'superagent'
// import Promise, { using } from 'bluebird'
// import _ from 'lodash'
// import config from '../../../config'
// import { camelizeKeys } from 'humps'
// import assign from 'object-assign'

// const { CALL_API, CHAIN_API, API_BASE_URL } = config

// export default ({ dispatch, getState }) => next => action => {
//   if (action[CALL_API]) {
//     return dispatch({
//       [CHAIN_API]: [
//         ()=> action
//       ]
//     })
//   }

//   let deferred = Promise.defer()

//   if (! action[CHAIN_API]) {
//     return next(action)
//   }

//   let promiseCreators = action[CHAIN_API].map((apiActionCreator)=> {
//     return createRequestPromise(apiActionCreator, next, getState, dispatch)
//   })

//   let overall = promiseCreators.reduce((promise, creator)=> {
//     return promise.then((body)=> {
//       return creator(body)
//     })
//   }, Promise.resolve())

//   overall.finally(()=> {
//     deferred.resolve()
//   }).catch(()=> {})

//   return deferred.promise
// }

// function actionWith (action, toMerge) {
//   let ret = assign({}, action, toMerge)
//   delete ret[CALL_API]
//   return ret
// }

// function createRequestPromise (apiActionCreator, next, getState, dispatch) {
//   return (prevBody)=> {
//     let apiAction = apiActionCreator(prevBody)
//     let deferred = Promise.defer()
//     let params = apiAction[CALL_API]

//     superAgent[params.method](params.url)
//       .send(params.body)
//       .query(params.query)
//       .end((err, res)=> {
//         if (err) {
//           if ( params.errorType ) {
//             dispatch(actionWith(apiAction, {
//               type: params.errorType,
//               error: err
//             }))
//           }

//           if (_.isFunction(params.afterError)) {
//             params.afterError({ getState })
//           }
//           deferred.reject()
//         } else {
//           let resBody = camelizeKeys(res.body)
//           dispatch(actionWith(apiAction, {
//             type: params.successType,
//             response: resBody
//           }))

//           if (_.isFunction(params.afterSuccess)) {
//             params.afterSuccess({ getState })
//           }
//           deferred.resolve(resBody)
//         }
//       })

//     return deferred.promise
//   }
// }